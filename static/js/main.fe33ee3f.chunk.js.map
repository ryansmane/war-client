{"version":3,"sources":["components/Header.js","classes/Player.js","components/RoomList.js","components/EnemyUnit.js","components/Stage.js","components/ChatBox.js","components/ActionSelect.js","components/Redirecting.js","components/InitPage.js","components/WinnerPage.js","components/Room.js","App.js","serviceWorker.js","index.js","util/letters.js","util/pathingService.js"],"names":["Header","className","src","alt","Player","id","this","deck","ready","topThree","push","pop","winnings","concat","exports","_","require","lowercase","uppercase","RoomList","props","socket","useState","roomList","setRoomList","roomName","setRoomName","roomCap","setRoomCap","waiting","setWaiting","username","setUserName","emptyFlag","setEmptyFlag","joinedHost","setJoinedHost","useEffect","sample","on","rooms","console","log","routerProps","history","Object","values","length","map","room","name","keys","players","capacity","onClick","e","host","preventDefault","emit","joinRoom","box","document","querySelector","button","style","display","showCreateBox","type","onChange","target","value","textAlign","Form","Control","as","roomData","assigned","desiredName","createRoom","EnemyUnit","warState","isEmpty","warringPlayers","winner","p","deckLength","deactivationMap","opacity","getPath","Stage","lost","readyPlayers","card","pip","suit","ChatBox","messages","setMessages","currentMessage","setCurrentMessage","message","sendMessage","m","sender","ActionSelect","acted","shoot","resolveWar","Redirecting","InitPage","initMyself","WinnerPage","Howl","Howler","Room","deal","volume","war","setHost","setPlayers","initFlag","setInitFlag","setReadyPlayers","setWarState","setWarringPlayers","deckLengths","setDeckLengths","setWinner","setDeactivationMap","ultimateWinner","setUltimateWinner","setClickedOnce","disconnected","setDisconnected","play","location","pathname","substring","data","setTimeout","warHistory","warPlayers","player","changed","visibility","openSocket","App","exact","path","render","Boolean","window","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","l","toUpperCase","toString","11","12","13","14"],"mappings":"kKAaeA,MAXf,WACI,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,OAAOC,IAAI,mBAAmBC,IAAI,+BACjD,yBAAKF,UAAU,aACf,8C,uBCPNG,E,WACF,WAAYC,GAAK,oBACbC,KAAKD,GAAKA,EACVC,KAAKC,KAAO,GACZD,KAAKE,OAAQ,E,6DAIb,IAAIC,EAAW,GAIf,OAHAA,EAASC,KAAKJ,KAAKC,KAAKI,OACxBF,EAASC,KAAKJ,KAAKC,KAAKI,OACxBF,EAASC,KAAKJ,KAAKC,KAAKI,OACjBF,I,mCAIP,OAAOH,KAAKC,KAAKI,Q,kCAGTC,GACRN,KAAKC,KAAOK,EAASC,OAAOP,KAAKC,U,KAKzCO,QAAQV,OAASA,E,YCrBXW,EAAIC,EAAQ,I,EACaA,EAAQ,IAAhCC,E,EAAAA,UAAWC,E,EAAAA,UA4KHC,MAxKf,SAAkBC,GACd,IAAIC,EAASD,EAAMC,OADE,EAEWC,mBAAS,IAFpB,mBAEdC,EAFc,KAEJC,EAFI,OAGWF,mBAAS,IAHpB,mBAGdG,EAHc,KAGJC,EAHI,OAISJ,mBAAS,GAJlB,mBAIdK,EAJc,KAILC,EAJK,OAKSN,oBAAS,GALlB,mBAKdO,EALc,KAKLC,EALK,OAMWR,qBANX,mBAMdS,EANc,KAMJC,EANI,OAOaV,oBAAS,GAPtB,mBAOdW,EAPc,KAOHC,EAPG,OAQeZ,mBAAS,IARxB,mBAQda,EARc,KAQFC,EARE,KA2DrB,OAjDAC,qBAAU,WACNL,EAAY,GAAD,OAAIjB,EAAEuB,OAAOpB,IAAb,OAA0BH,EAAEuB,OAAOrB,KAC9CI,EAAOkB,GAAG,gBAAgB,SAACC,GAEvBhB,EAAYgB,GACZC,QAAQC,IAAIF,MAGhBnB,EAAOkB,GAAG,kBAAkB,SAAAlC,GACxBe,EAAMuB,YAAYC,QAAQlC,KAA1B,oBAA4CL,SAElD,IAuCC,8BACKwB,GAAWE,GACV,oCACG,yBAAK9B,UAAU,gBACZ,8CACkB,4BAAK8B,GADvB,KAGA,2CACA,4BACuC,IAAnCc,OAAOC,OAAOvB,GAAUwB,QACtB,uDAEFxB,GACEsB,OAAOC,OAAOvB,GAAUyB,KAAI,SAACC,GAC1B,OACG,yCACcA,EAAKC,KADnB,cACoC,IAChCL,OAAOM,KAAKF,EAAKG,SAASL,OAF9B,KAEwC,IACpCE,EAAKI,SACLJ,EAAKI,SACHR,OAAOM,KAAKF,EAAKG,SAASL,QAC1B,oCACG,4BACGO,QAAS,SAACC,GAAD,OAvC/B,SAACC,EAAMN,EAAMK,GAC1BzB,GAAW,GACXyB,EAAEE,iBACFrB,EAAcoB,GACdnC,EAAOqC,KAAK,YAAa,CAACF,OAAMN,OAAMnB,aAoCA4B,CAASV,EAAKO,KAAMP,EAAKC,KAAMK,KAFrC,cASLN,EAAKI,UACHR,OAAOM,KAAKF,EAAKG,SAASL,QAC1B,oCACG,8CAQrB,4BACG9C,UAAU,gBACVqD,QAAS,kBApDL,WAClB,IAAMM,EAAMC,SAASC,cAAc,eAC7BC,EAASF,SAASC,cAAc,kBACtCF,EAAII,MAAMC,QAAgC,SAAtBL,EAAII,MAAMC,QAAqB,QAAU,OAC7DF,EAAOC,MAAMC,QAAU,OAgDMC,KAFlB,eAMA,yBAAKF,MAAO,CAAEC,QAAS,QAAUhE,UAAU,cACxC,0BAAMA,UAAU,UACb,6BACG,4CAEA,2BACGkE,KAAK,OACLC,SAAU,SAACb,GAAD,OAAO7B,EAAY6B,EAAEc,OAAOC,WAG3CrC,GACE,uBAAG+B,MAAO,CAAEO,UAAW,WAAvB,8BAIH,yBAAKtE,UAAU,YACZ,2CACA,kBAACuE,EAAA,EAAKC,QAAN,CACGL,SAAU,SAACb,GAAD,OAAO3B,EAAW2B,EAAEc,OAAOC,QACrCI,GAAG,UAEH,qCACA,qCACA,qCACA,qCACA,uCAIN,yBAAKzE,UAAU,YACZ,wCACA,kBAACuE,EAAA,EAAKC,QAAN,CAAcC,GAAG,UACd,yCAGN,4BAAQP,KAAK,SAASb,QAAS,SAACC,GAAD,OAvHjC,SAACA,GAEhB,GADAA,EAAEE,iBACe,KAAbhC,EACAS,GAAa,OACV,CACPA,GAAa,GACbJ,GAAW,GACXM,EAAcf,EAAOhB,IACrB,IAAIsE,EAAW,CACXnB,KAAMnC,EAAOhB,GACb6C,KAAMzB,EACNmD,UAAU,EACVvB,SAAU1B,EACVkD,YAAa9C,GAEjBV,EAAOqC,KAAK,cAAeiB,IAwG4BG,CAAWvB,KAAjD,mBAQd1B,GAAWgB,OAAOC,OAAOvB,GAAUwB,OAAS,GAC1C,6BACG,2DACA,yCACA,gDAAkBtB,IACjBF,EAASY,IACP,qDACGU,OAAOC,OAAOvB,EAASY,GAAYiB,SAASL,OAD/C,YAEIxB,EAASY,GAAYkB,WAE5B,2CCzKVtC,EAAIC,EAAQ,IAqFH+D,MAnFf,SAAmB3D,GACf,OACG,yBAAKnB,UAAU,cACXmB,EAAM4D,WACHjE,EAAEkE,QAAQ7D,EAAM8D,iBACjB9D,EAAM8D,eAAe9D,EAAMf,KACxB,yBAAKJ,UAAU,qBACXmB,EAAM+D,SAAW/D,EAAMf,IACrB,yBACGJ,UAAU,QACVC,IAAI,oBACJC,IAAI,WAGV,yBAAKF,UAAU,kBACf,8BAAOmB,EAAM8B,MACZ9B,EAAM4D,WACHjE,EAAEkE,QAAQ7D,EAAM8D,iBACjB9D,EAAM8D,eAAe9D,EAAMf,KAC3BwC,OAAOC,OAAO1B,EAAM8D,gBAAgBlC,KAAI,SAACoC,GACtC,OACG,yBACGnF,UAAU,QACVC,IAAI,wBACJC,IAAI,aAIhB,wCAAUiB,EAAMiE,WAAhB,WAIPjE,EAAM4D,WAAa5D,EAAM8D,eAAe9D,EAAMf,KAC7C,6BAaG,yBAAKJ,UAAU,kBACZ,8BAAOmB,EAAM8B,MACZ9B,EAAM4D,WACHjE,EAAEkE,QAAQ7D,EAAM8D,iBACjB9D,EAAM8D,eAAe9D,EAAMf,KAC3BwC,OAAOC,OAAO1B,EAAM8D,gBAAgBlC,KAAI,SAACoC,GACtC,OACG,yBACGnF,UAAU,QACVC,IAAI,wBACJC,IAAI,aAIhB,wCAAUiB,EAAMiE,WAAhB,WAIPjE,EAAMkE,gBAAgBlE,EAAMf,KAC3B,yBACGJ,UAAU,OACVC,IAAI,4BACJC,IAAI,eAGTiB,EAAMkE,gBAAgBlE,EAAMf,KAC1B,yBACG2D,MAAO,CAAEuB,QAAS,MAClBtF,UAAU,OACVC,IAAI,iCACJC,IAAI,iBC9EZqF,EAAYxE,EAAQ,IAApBwE,QACExE,EAAQ,IA2DHyE,MAzDf,SAAerE,GACZ,OACG,qCACKA,EAAMsE,MACL,oCACItE,EAAMuE,cAAgBvE,EAAMuE,aAAavE,EAAMf,KAC7C,yBACGJ,UAAU,OACVC,IAAKsF,EACFpE,EAAMuE,aAAavE,EAAMf,IAAIuF,KAAKC,IAClCzE,EAAMuE,aAAavE,EAAMf,IAAIuF,KAAKE,MAErC3F,IAAG,UAAKiB,EAAMuE,aAAavE,EAAMf,IAAIuF,KAAKC,KAAvC,OACAzE,EAAMuE,aAAavE,EAAMf,IAAIuF,KAAKE,QAI1C1E,EAAMuE,eACHvE,EAAMuE,aAAavE,EAAMf,KAC1Be,EAAM+D,SAAW/D,EAAMf,IACpB,yBACGJ,UAAU,OACVC,IAAI,yBACJC,IAAI,UAGXiB,EAAMuE,cACL,yBACG1F,UAAU,OACVC,IAAI,yBACJC,IAAI,SAGTiB,EAAMuE,eACHvE,EAAMuE,aAAavE,EAAMf,KAC1Be,EAAM+D,SAAW/D,EAAMf,IACpB,yBACGJ,UAAU,OACVC,IAAI,0BACJC,IAAI,UAKlBiB,EAAMsE,MACJ,oCACG,yBACGzF,UAAU,OACVC,IAAI,wBACJC,IAAI,aCbP4F,MAtCf,SAAiB3E,GAEb,IAAMoC,EAAOpC,EAAMoC,KACbnC,EAASD,EAAMC,OAHD,EAIYC,qBAJZ,mBAIb0E,EAJa,KAIHC,EAJG,OAKwB3E,mBAAS,IALjC,mBAKb4E,EALa,KAKGC,EALH,KAoBpB,OAbA9D,qBAAU,WACNhB,EAAOkB,GAAG,mBAAmB,SAAAyD,GACzBC,EAAYD,QAEjB,IAUC,yBAAK/F,UAAU,YACf,8BACA,2BAAOqE,MAAO4B,EAAgB9B,SAAU,SAACb,GAAD,OAAO4C,EAAkB5C,EAAEc,OAAOC,UAC1E,4BAAQhB,QAAS,SAACC,GAAD,OAXD,SAACA,GACjBA,EAAEE,iBACFpC,EAAOqC,KAAK,eAAgB,CAAC0C,QAASF,EAAgB1C,KAAMA,EAAMnD,GAAIe,EAAMf,KAC5EkD,EAAEc,OAAOC,MAAQ,GACjB6B,EAAkB,IAOME,CAAY9C,KAApC,SAEA,6BACCyC,GAAYA,EAAShD,KAAI,SAAAsD,GACtB,OACA,oCAAUA,EAAEC,OAAZ,KAAsBD,EAAEF,aAI5B,6CClCEpF,EAAQ,IA6DHwF,MA3Df,SAAsBpF,GAGnB,OACG,qCACEA,EAAMsE,MAAQ,yBAAKzF,UAAU,kBAC1BmB,EAAM4D,WAAa5D,EAAMqF,OACxB,yBACGxG,UAAU,sBACVC,IAAI,4BACJC,IAAI,MACJmD,QAAS,kBAAMlC,EAAMsF,YAKzBtF,EAAM4D,UAAY5D,EAAMqF,OACvB,yBACGxG,UAAU,OACVC,IAAI,4BACJC,IAAI,QAKTiB,EAAM4D,UACJ5D,EAAM8D,gBACN9D,EAAM8D,eAAe9D,EAAMf,MAC1Be,EAAMqF,OACP,yBAAKxG,UAAU,OAAOC,IAAI,4BAC1BC,IAAI,MAAMmD,QAAS,kBAAMlC,EAAMuF,gBAEjCvF,EAAM4D,UACJ5D,EAAM8D,gBACN9D,EAAM8D,eAAe9D,EAAMf,KAC3Be,EAAMqF,OACH,yBAAKxG,UAAU,OAAOC,IAAI,4BACvBC,IAAI,QAEZiB,EAAM4D,UACJ5D,EAAM8D,iBACL9D,EAAM8D,eAAe9D,EAAMf,KACzB,yBAAKJ,UAAU,OAAOC,IAAI,4BACvBC,IAAI,QAEb,+BAGFiB,EAAMsE,MACD,yBACGzF,UAAU,OACVC,IAAI,iCACJC,IAAI,UC5CJyG,MATf,WACI,OACI,6BACI,yEACA,gECKGC,MATf,SAAkBzF,GACd,OACI,oCACA,4DACA,yBAAKlB,IAAI,4BAA4BC,IAAI,yBAAyBmD,QAAS,kBAAMlC,EAAM0F,kBCIhFC,MARf,WACG,OACG,6BACG,wC,ECGgB/F,EAAQ,IAAzBgG,E,EAAAA,KAEFjG,G,EAFQkG,OAEJjG,EAAQ,KAwVHkG,MAtVf,SAAc9F,GACX,IAAIC,EAASD,EAAMC,OACb8F,EAAO,IAAIH,EAAK,CACnB9G,IAAK,CAAC,yBACNkH,OAAQ,IAELC,EAAM,IAAIL,EAAK,CAClB9G,IAAK,CAAC,yBACNkH,OAAQ,IARO,EAUM9F,qBAVN,mBAUXkC,EAVW,KAUL8D,EAVK,OAWYhG,qBAXZ,mBAWX8B,EAXW,KAWFmE,EAXE,OAYcjG,oBAAS,GAZvB,mBAYXkG,EAZW,KAYDC,EAZC,OAasBnG,qBAbtB,mBAaXqE,EAbW,KAaG+B,EAbH,OAccpG,oBAAS,GAdvB,mBAcX0D,EAdW,KAcD2C,EAdC,OAe0BrG,mBAAS,IAfnC,mBAeX4D,EAfW,KAeK0C,EAfL,OAgBoBtG,qBAhBpB,mBAgBXuG,EAhBW,KAgBEC,EAhBF,OAiBUxG,oBAAS,GAjBnB,mBAiBX6D,EAjBW,KAiBH4C,EAjBG,OAkB4BzG,mBAAS,IAlBrC,mBAkBXgE,EAlBW,KAkBM0C,EAlBN,OAmB0B1G,oBAAS,GAnBnC,mBAmBX2G,GAnBW,KAmBKC,GAnBL,QAoBoB5G,oBAAS,GApB7B,qBAoBE6G,IApBF,gBAqBsB7G,oBAAS,GArB/B,qBAqBX8G,GArBW,MAqBGC,GArBH,MA+FlB,SAAS3B,KACNS,EAAKmB,OACLH,IAAe,GACf9G,EAAOqC,KAAK,WAAYF,GAI3B,SAASmD,KACNQ,EAAKmB,OACLjH,EAAOqC,KAAK,kBAAmB,CAAEF,OAAM0B,mBAG1C,OAnFA7C,qBAAU,WACPiF,EAAQlG,EAAMuB,YAAY4F,SAASC,SAASC,UAAU,KAEtDpH,EAAOkB,GAAG,sBAAsB,SAACmG,GAC9BnB,EAAWmB,EAAKtF,SAChB0E,EAAeY,EAAKb,gBAGvBxG,EAAOkB,GAAG,aAAa,SAACmG,GACrBhB,EAAgBgB,EAAKtF,SACrB0E,EAAeY,EAAKb,aAChBhF,OAAOC,OAAO4F,EAAKtF,SAASL,SAAW2F,EAAK/G,SAAY+G,EAAKrB,KAC9DsB,YAAW,WACRtH,EAAOqC,KAAK,gBAAiBtC,EAAMuB,YAAY4F,SAASC,SAASC,UAAU,OACxE,SAIZpH,EAAOkB,GAAG,YAAY,SAAAmG,GACfA,EAAKpD,iBACN0C,EAAmBU,EAAKpD,iBAGvBoD,EAAKT,gBACNC,GAAkBQ,EAAKvD,QAGtBuD,EAAKE,YACTjB,GAAY,GACZD,EAAgBgB,EAAKE,YACrBhB,EAAkB,IAClBe,YAAW,WACXZ,EAAUW,EAAKvD,QACf2C,EAAeY,EAAKb,aACpBH,EAAgBgB,EAAKtF,WAElB,QAEAuE,GAAY,GACZD,EAAgBgB,EAAKtF,SACrB2E,EAAUW,EAAKvD,QACf2C,EAAeY,EAAKb,iBAI1BxG,EAAOkB,GAAG,OAAO,SAAAmG,GACdC,YAAW,WACPD,EAAKpD,iBACN0C,EAAmBU,EAAKpD,iBAE3ByC,GAAU,GACVD,EAAeY,EAAKb,aACpBH,EAAgBgB,EAAKtF,SACrBwE,EAAkBc,EAAKG,YACvBlB,GAAY,KAAQ,KACpBN,EAAIiB,UAIPjH,EAAOkB,GAAG,gBAAgB,SAAAuG,GACvBT,IAAgB,GAChBM,YAAW,kBAAMvH,EAAMuB,YAAYC,QAAQlC,KAA1B,OAAqC,UAGzD,IAoBA,qCACK0H,IACC,yBAAKnI,UAAU,kBACXuD,IAASJ,IAAYoE,GACnB,kBAAC,EAAD,CAAUhE,KAAMA,EAAMsD,WAtBrC,WACGW,GAAY,GACZpG,EAAOqC,KAAK,kBAAmBF,MAsBrBA,IAASJ,GAAWoE,GAClB,wEAEFhE,GAAQJ,GAAWoE,IAAaS,IAC9B,yBAAKhI,UAAU,QACZ,yBAAKA,UAAU,cACX4C,OAAOC,OAAOM,GAASJ,KAAI,SAAC8F,GAC1B,GAAIA,EAAOzI,KAAOgB,EAAOhB,GACtB,OACG,yBAAKJ,UAAU,wBACZ,yBAAKA,UAAU,cACZ,kBAAC,EAAD,CACGiF,eAAgBA,EAChBF,SAAUA,EACV9B,KAAM4F,EAAO5F,KACbmC,WACGwC,EACKA,EAAYiB,EAAOzI,IACnB,KAERA,GAAIyI,EAAOzI,GACXiF,gBAAiBA,EACjBH,OAAQA,IAGX,yBAAKlF,UAAU,gBACZ,kBAAC,EAAD,CACGyF,QAAMJ,IAAmBA,EAAgBwD,EAAOzI,KAChD8E,OAAQA,EACRH,SAAUA,EACVE,eAAgBA,EAChB7E,GAAIyI,EAAOzI,GACXsF,aACGA,IAEK,WAUhC,yBAAK1F,UAAU,kBACX+E,GAAY,uBAAG/E,UAAU,iBAAb,UAEdqF,EAAgBjE,EAAOhB,KACtB,yBAAKJ,UAAU,kBACZ,kBAAC,EAAD,CACGoB,OAAQA,EACRmC,KAAMpC,EAAMuB,YAAY4F,SAASC,SAASC,UACvC,IAEHpI,GAAIgB,EAAOhB,KAEd,yBAAKJ,UAAU,WACZ,yBAAKA,UAAU,cACZ,6BACG,yBAAKA,UAAU,KACX+E,IACGjE,EAAEkE,QAAQC,IACXA,EAAe7D,EAAOhB,KACtBwC,OAAOC,OAAOoC,GAAgBlC,KAC3B,SAACoC,GACE,OACG,yBACGnF,UAAU,QACVC,IAAI,wBACJC,IAAI,aAKnB,8BACG,kCAAQiD,EAAQ/B,EAAOhB,IAAI6C,QAI9B,kBAAC,EAAD,CACGwC,MAAM,EACNxC,KACGE,EACKA,EAAQ/B,EAAOhB,IAAI6C,KACnB,mBAERmC,WACGwC,EACKA,EAAYxG,EAAOhB,IACnB,KAER2E,SAAUA,EACV0B,MAAOA,GACPC,WAAYA,GACZxB,OAAQA,EACRD,eAAgBA,EAChB7E,GAAIgB,EAAOhB,GACXoG,MACGd,GACAA,EAAatE,EAAOhB,IACfsF,EAAatE,EAAOhB,IAChB0I,QACJ,QAKjB,yBAAK9I,UAAU,qBACf,6BACG,yBACG+D,MAAO,CAAEgF,WAAY,UACrB/I,UAAU,KAET+E,IACGjE,EAAEkE,QAAQC,IACXA,EAAe7D,EAAOhB,KACtBwC,OAAOC,OAAOoC,GAAgBlC,KAC3B,SAACoC,GACE,OACG,yBACGnF,UAAU,QACVC,IAAI,wBACJC,IAAI,aAKnB,8BAAOiD,EAAQ/B,EAAOhB,IAAI6C,OAE7B,kBAAC,EAAD,CACGwC,MAAM,EACNP,OAAQA,EACRH,SAAUA,EACVE,eAAgBA,EAChB7E,GAAIgB,EAAOhB,GACXsF,aACGA,IAA8B,MAK1C,2BACIkC,GAAW,sBACMA,EAAYxG,EAAOhB,IADzB,UAMvBiF,EAAgBjE,EAAOhB,KACrB,yBAAKJ,UAAU,kBACZ,kBAAC,EAAD,CACGoB,OAAQA,EACRmC,KAAMpC,EAAMuB,YAAY4F,SAASC,SAASC,UACvC,IAEHpI,GAAIgB,EAAOhB,KAEd,yBAAKJ,UAAU,WACZ,yBAAKA,UAAU,cACZ,6BACG,yBAAKA,UAAU,KACZ,8BACG,kCAAQmD,EAAQ/B,EAAOhB,IAAI6C,QAGjC,kBAAC,EAAD,CACGwC,MAAM,EACNxC,KACGE,EACKA,EAAQ/B,EAAOhB,IAAI6C,KACnB,mBAERmC,WACGwC,EACKA,EAAYxG,EAAOhB,IACnB,KAER2E,SAAUA,EACV0B,MAAOA,GACPC,WAAYA,GACZxB,OAAQA,EACRD,eAAgBA,EAChB7E,GAAIgB,EAAOhB,GACXoG,MACGd,GACAA,EAAatE,EAAOhB,IACfsF,EAAatE,EAAOhB,IAAI0I,QACxB,OA5Bd,KAiCA,yBAAK9I,UAAU,qBACf,6BACG,kBAAC,EAAD,CACGyF,MAAM,EACNP,OAAQA,EACRH,SAAUA,EACVE,eAAgBA,EAChB7E,GAAIgB,EAAOhB,GACXsF,aACGA,IAA8B,MAK1C,2BAAIkC,GAAW,sBAKvBI,KAAmB5G,EAAOhB,IACxB,yBAAKJ,UAAU,kBACZ,yCAKXuH,GAAY,uBAAGvH,UAAU,gBAAb,cAGlBmI,IAAgB,kBAAC,EAAD,MAChBH,IAAkB,kBAAC,EAAD,Q,8BCpVtB5G,E,MAAS4H,GAAW,qCAwBXC,MArBf,WAEE,OACG,oCACA,gCACG,kBAAC,EAAD,OAEH,8BACG,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC1G,GAC5B,OAAO,kBAAC,EAAD,CAAUtB,OAAQA,EAAQsB,YAAaA,OAEjD,kBAAC,IAAD,CAAOyG,KAAK,oBAAoBC,OAAQ,SAAC1G,GACtC,OAAO,kBAAC,EAAD,CAAMtB,OAAQA,EAAQsB,YAAaA,WCbpC2G,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2D,YCXNC,IAASL,OAEP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFxF,SAAS8F,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcrJ,MACrBsJ,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzH,QAAQyH,MAAMA,EAAM9D,a,2EEzI5B,IAAMnF,EAAY,CAClB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGvHC,EAAYD,EAAU+B,KAAI,SAAAmH,GAAC,OAAIA,EAAEC,iBAEvCtJ,EAAQG,UAAYA,EACpBH,EAAQI,UAAYA,G,iBCQpBJ,EAAQ0E,QAfR,SAAiBK,EAAKC,GAYlB,OAHID,EAAM,GACA,wBAA0BA,EAAIwE,WAAavE,EAAO,OAClD,wBAVA,CACNwE,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KAMgC5E,GAAOC,EAAO,S","file":"static/js/main.fe33ee3f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <div className='header-box'>\n            <img className='logo' src='/images/logo.png' alt='a cute shark holding cards'></img>\n            <div className='title-box'>\n            <h1>Shark Haven</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","class Player {\n    constructor(id) {\n        this.id = id;\n        this.deck = [];\n        this.ready = false;\n    }\n\n    removeTopThree() {\n        let topThree = [];\n        topThree.push(this.deck.pop());\n        topThree.push(this.deck.pop());\n        topThree.push(this.deck.pop());\n        return topThree;\n    }\n\n    getTopCard() {\n        return this.deck.pop();\n    }\n\n    addWinnings(winnings) {\n        this.deck = winnings.concat(this.deck);\n    }\n\n}\n\nexports.Player = Player;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Player } from '../classes/Player';\nimport Form from 'react-bootstrap/Form';\nconst _ = require('lodash');\nconst {lowercase, uppercase} = require('../util/letters')\n\n\n\nfunction RoomList(props) {\n    let socket = props.socket;\n    const [roomList, setRoomList] = useState({}); \n    const [roomName, setRoomName] = useState('');\n    const [roomCap, setRoomCap] = useState(2);\n    const [waiting, setWaiting] = useState(false);\n    const [username, setUserName] = useState();\n    const [emptyFlag, setEmptyFlag] = useState(false);\n    const [joinedHost, setJoinedHost] = useState('');\n\n    useEffect(() => {\n        setUserName(`${_.sample(uppercase)}${_.sample(lowercase)}`);\n        socket.on('return-rooms', (rooms) => {\n            \n            setRoomList(rooms);\n            console.log(rooms);\n        });\n\n        socket.on('all-players-in', id => {\n            props.routerProps.history.push(`/cardroom/${id}`);\n        })\n    },[])\n\n\n    const createRoom = (e) => {\n        e.preventDefault();\n        if (roomName === '') {\n            setEmptyFlag(true);\n        } else {\n        setEmptyFlag(false);\n        setWaiting(true);\n        setJoinedHost(socket.id);\n        let roomData = {\n            host: socket.id,\n            name: roomName,\n            assigned: false,\n            capacity: roomCap,\n            desiredName: username\n        };\n        socket.emit('create-room', roomData);\n        }\n        \n    }\n\n    const joinRoom = (host, name, e) => {\n        setWaiting(true)\n        e.preventDefault();\n        setJoinedHost(host);\n        socket.emit('join-room', {host, name, username})\n        \n    }\n\n    const showCreateBox = () => {\n        const box = document.querySelector('.create-box');\n        const button = document.querySelector('.button-create');\n        box.style.display = box.style.display === 'none' ? 'block' : 'none';\n        button.style.display = 'none';\n    }\n\n    return (\n       <div>\n          {!waiting && username && (\n             <>\n                <div className='waiting-room'>\n                   <h2>\n                      Welcome, Shark <em>{username}</em>!\n                   </h2>\n                   <h3>Card Rooms:</h3>\n                   <ul>\n                      {Object.values(roomList).length === 0 && (\n                         <li>No Lobbies At This Time</li>\n                      )}\n                      {roomList &&\n                         Object.values(roomList).map((room) => {\n                            return (\n                               <li>\n                                  Room Name:{room.name} | Members:{' '}\n                                  {Object.keys(room.players).length} /{' '}\n                                  {room.capacity}\n                                  {room.capacity >\n                                     Object.keys(room.players).length && (\n                                     <>\n                                        <button\n                                           onClick={(e) =>\n                                              joinRoom(room.host, room.name, e)\n                                           }\n                                        >\n                                           Join Room\n                                        </button>\n                                     </>\n                                  )}\n                                  {room.capacity <=\n                                     Object.keys(room.players).length && (\n                                     <>\n                                        <span>(Full)</span>\n                                     </>\n                                  )}\n                               </li>\n                            );\n                         })}\n                   </ul>\n\n                   <button\n                      className='button-create'\n                      onClick={() => showCreateBox()}\n                   >\n                      Create Room\n                   </button>\n                   <div style={{ display: 'none' }} className='create-box'>\n                      <form className='ifield'>\n                         <div>\n                            <label>Room Name</label>\n\n                            <input\n                               type='text'\n                               onChange={(e) => setRoomName(e.target.value)}\n                            />\n                         </div>\n                         {emptyFlag && (\n                            <p style={{ textAlign: 'center' }}>\n                               Room name cannot be empty.\n                            </p>\n                         )}\n                         <div className='form-cap'>\n                            <label>Players:</label>\n                            <Form.Control\n                               onChange={(e) => setRoomCap(e.target.value)}\n                               as='select'\n                            >\n                               <option>2</option>\n                               <option>3</option>\n                               <option>4</option>\n                               <option>5</option>\n                               <option>6</option>\n                            </Form.Control>\n                         </div>\n\n                         <div className='form-cap'>\n                            <label>Game:</label>\n                            <Form.Control as='select'>\n                               <option>War</option>\n                            </Form.Control>\n                         </div>\n                         <button type='button' onClick={(e) => createRoom(e)}>\n                            Create Room\n                         </button>\n                      </form>\n                   </div>\n                </div>\n             </>\n          )}\n          {waiting && Object.values(roomList).length > 0 && (\n             <div>\n                <h1>Waiting for more players...</h1>\n                <h4>Settings:</h4>\n                <p>{`Room Name: ${roomName}`}</p>\n                {roomList[joinedHost] && (\n                   <p>{`Joined Players: ${\n                      Object.values(roomList[joinedHost].players).length\n                   }/${roomList[joinedHost].capacity}`}</p>\n                )}\n                <p>{`Game: War`}</p>\n             </div>\n          )}\n       </div>\n    );\n}\n\nexport default RoomList;","import React from 'react';\nconst _ = require('lodash');\n\nfunction EnemyUnit(props) {\n    return (\n       <div className='enemy-unit'>\n          {props.warState &&\n             !_.isEmpty(props.warringPlayers) &&\n             props.warringPlayers[props.id] && (\n                <div className='enemy-info-at-war'>\n                   {props.winner === props.id && (\n                      <img\n                         className='crown'\n                         src='/images/crown.png'\n                         alt='winner'\n                      ></img>\n                   )}\n                   <div className='name-and-count'>\n                   <span>{props.name}</span>\n                   {props.warState &&\n                      !_.isEmpty(props.warringPlayers) &&\n                      props.warringPlayers[props.id] &&\n                      Object.values(props.warringPlayers).map((p) => {\n                         return (\n                            <img\n                               className='sword'\n                               src='/images/war_sword.png'\n                               alt='sword'\n                            ></img>\n                         );\n                      })}\n                   <span>{`${props.deckLength}/52`}</span>\n                   </div>\n                </div>\n             )}\n          {!props.warState && !props.warringPlayers[props.id] && (\n             <div>\n                {/* {props.warState &&\n                   !_.isEmpty(props.warringPlayers) &&\n                   props.warringPlayers[props.id] &&\n                   Object.values(props.warringPlayers).map((p) => {\n                      return (\n                         <img\n                            className='sword'\n                            src='/images/war_sword.png'\n                            alt='sword'\n                         ></img>\n                      );\n                   })} */}\n                <div className='name-and-count'>\n                   <span>{props.name}</span>\n                   {props.warState &&\n                      !_.isEmpty(props.warringPlayers) &&\n                      props.warringPlayers[props.id] &&\n                      Object.values(props.warringPlayers).map((p) => {\n                         return (\n                            <img\n                               className='sword'\n                               src='/images/war_sword.png'\n                               alt='sword'\n                            ></img>\n                         );\n                      })}\n                   <span>{`${props.deckLength}/52`}</span>\n                </div>\n             </div>\n          )}\n          {!props.deactivationMap[props.id] && (\n             <img\n                className='card'\n                src='/images/card_back_war.png'\n                alt='enemy back'\n             ></img>\n          )}\n          {props.deactivationMap[props.id] && (\n             <img\n                style={{ opacity: '.5' }}\n                className='card'\n                src='/images/lost_card_back_war.png'\n                alt='enemy back'\n             ></img>\n          )}\n       </div>\n    );\n}\n\nexport default EnemyUnit;","import React from 'react';\nconst { getPath } = require('../util/pathingService');\nconst _ = require('lodash');\n\nfunction Stage(props) {\n   return (\n      <>\n         {!props.lost && (\n            <>\n               {props.readyPlayers && props.readyPlayers[props.id] && (\n                  <img\n                     className='card'\n                     src={getPath(\n                        props.readyPlayers[props.id].card.pip,\n                        props.readyPlayers[props.id].card.suit\n                     )}\n                     alt={`${props.readyPlayers[props.id].card.pip}${\n                        props.readyPlayers[props.id].card.suit\n                     }`}\n                  ></img>\n               )}\n               {props.readyPlayers &&\n                  !props.readyPlayers[props.id] &&\n                  props.winner !== props.id && (\n                     <img\n                        className='card'\n                        src='/images/empty_card.png'\n                        alt='slot'\n                     ></img>\n                  )}\n               {!props.readyPlayers && (\n                  <img\n                     className='card'\n                     src='/images/empty_card.png'\n                     alt='slot'\n                  ></img>\n               )}\n               {props.readyPlayers &&\n                  !props.readyPlayers[props.id] &&\n                  props.winner === props.id && (\n                     <img\n                        className='card'\n                        src='/images/winner_card.png'\n                        alt='slot'\n                     ></img>\n                  )}\n            </>\n         )}\n         {props.lost && (\n            <>\n               <img\n                  className='card'\n                  src='/images/cross_out.png'\n                  alt='loser'\n               ></img>\n            </>\n         )}\n      </>\n   );\n}\n\nexport default Stage;\n","import React, { useEffect, useState } from 'react';\n\nfunction ChatBox(props) {\n\n    const host = props.host;\n    const socket = props.socket;\n    const [messages, setMessages] = useState();\n    const [currentMessage, setCurrentMessage] = useState('');\n\n    useEffect(() => {\n        socket.on('messages-update', messages => {\n            setMessages(messages);\n        })\n    }, [])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        socket.emit('send-message', {message: currentMessage, host: host, id: props.id});\n        e.target.value = '';\n        setCurrentMessage('');\n    }\n\n    return (\n        <div className='chat-box'>\n        <form>\n        <input value={currentMessage} onChange={(e) => setCurrentMessage(e.target.value)}></input>\n        <button onClick={(e) => sendMessage(e)}>Send</button>\n        </form>\n        <div>\n        {messages && messages.map(m => {\n            return (\n            <p>Shark {m.sender}: {m.message}</p>\n            )\n        })}\n        </div>\n        <p>Game Started</p>\n        </div>\n    )\n}\n\nexport default ChatBox;\n","import React, {useState} from 'react';\nconst _ = require('lodash');\n\nfunction ActionSelect(props) {\n\n\n   return (\n      <>\n      {!props.lost && <div className='action-select'>\n         {!props.warState && !props.acted && (\n            <img\n               className='card animation-card'\n               src='/images/card_back_war.png'\n               alt='alt'\n               onClick={() => props.shoot()}\n            ></img>\n               \n            \n         )}\n         {!props.warState && props.acted && (\n            <img\n               className='card'\n               src='/images/card_back_war.png'\n               alt='alt'\n            ></img>\n\n\n         )}\n         {props.warState &&\n            props.warringPlayers &&\n            props.warringPlayers[props.id] &&\n            !props.acted && (\n            <img className='card' src='/images/card_back_war.png'\n            alt='alt' onClick={() => props.resolveWar()}></img>\n            )}\n         {props.warState &&\n            props.warringPlayers &&\n            props.warringPlayers[props.id] &&\n            props.acted && (\n               <img className='card' src='/images/card_back_war.png'\n                  alt='alt'></img>\n            )}\n         {props.warState &&\n            props.warringPlayers &&\n            !props.warringPlayers[props.id] && (\n               <img className='card' src='/images/card_back_war.png'\n                  alt='alt'></img>\n            )}\n         <div>\n         </div>\n      </div>}\n      {props.lost &&  \n            <img\n               className='card'\n               src='/images/lost_card_back_war.png'\n               alt='alt'\n            ></img>\n      }\n      </>\n   );\n}\n\nexport default ActionSelect;\n","import React from 'react';\n\nfunction Redirecting() {\n    return (\n        <div>\n            <h2>A player from your game has disconnected.</h2>\n            <h4>Redirecting in five seconds...</h4>\n        </div>\n    )\n}\n\nexport default Redirecting;","import React from 'react';\n\nfunction InitPage(props) {\n    return (\n        <>\n        <h1>Click your deck to ready up!</h1>\n        <img src='/images/card_back_war.png' alt='click here to ready up' onClick={() => props.initMyself()}></img>\n        </>\n    )\n}\n\nexport default InitPage;","import React from 'react';\n\nfunction WinnerPage() {\n   return (\n      <div>\n         <h2>WINNER</h2>\n      </div>\n   );\n}\n\nexport default WinnerPage;\n","import React, { useEffect, useState } from 'react';\nimport EnemyUnit from './EnemyUnit';\nimport Stage from './Stage'\nimport ChatBox from './ChatBox'\nimport ActionSelect from './ActionSelect'\nimport Redirecting from './Redirecting'\nimport InitPage from './InitPage'\nimport WinnerPage from './WinnerPage'\nconst { Howl, Howler } = require('howler');\n\nconst _ = require('lodash');\n\nfunction Room(props) {\n   let socket = props.socket;\n   const deal = new Howl({\n      src: ['/sounds/card_deal.wav'],\n      volume: 1,\n   });\n   const war = new Howl({\n      src: ['/sounds/war_sound.wav'],\n      volume: 1,\n   });\n   const [host, setHost] = useState();\n   const [players, setPlayers] = useState();\n   const [initFlag, setInitFlag] = useState(false);\n   const [readyPlayers, setReadyPlayers] = useState();\n   const [warState, setWarState] = useState(false);\n   const [warringPlayers, setWarringPlayers] = useState({});\n   const [deckLengths, setDeckLengths] = useState();\n   const [winner, setWinner] = useState(false);\n   const [deactivationMap, setDeactivationMap] = useState({});\n   const [ultimateWinner, setUltimateWinner] = useState(false);\n   const [clickedOnce, setClickedOnce] = useState(false);\n   const [disconnected, setDisconnected] = useState(false);\n\n\n   useEffect(() => {\n      setHost(props.routerProps.location.pathname.substring(10));\n\n      socket.on('return-all-players', (data) => {\n         setPlayers(data.players);\n         setDeckLengths(data.deckLengths);\n      });\n\n      socket.on('one-ready', (data) => {\n         setReadyPlayers(data.players);\n         setDeckLengths(data.deckLengths);\n         if (Object.values(data.players).length === data.roomCap && !data.war) {\n            setTimeout(() => {\n               socket.emit('refresh-cards', props.routerProps.location.pathname.substring(10));\n               }, 1500);\n         }\n      });\n\n      socket.on('resolved', data => {\n         if (data.deactivationMap) {\n            setDeactivationMap(data.deactivationMap);\n         }\n\n         if (data.ultimateWinner) {\n            setUltimateWinner(data.winner)\n         }\n\n         if (data.warHistory) {\n         setWarState(false);\n         setReadyPlayers(data.warHistory);\n         setWarringPlayers({});\n         setTimeout(() => {\n         setWinner(data.winner);\n         setDeckLengths(data.deckLengths);\n         setReadyPlayers(data.players);\n         \n         }, 1500);\n         } else {\n            setWarState(false);\n            setReadyPlayers(data.players);\n            setWinner(data.winner)\n            setDeckLengths(data.deckLengths);\n         }\n      })\n\n      socket.on('war', data => {\n         setTimeout(() => {\n         if (data.deactivationMap) {\n            setDeactivationMap(data.deactivationMap)\n         }\n         setWinner(false);\n         setDeckLengths(data.deckLengths);\n         setReadyPlayers(data.players);\n         setWarringPlayers(data.warPlayers);\n         setWarState(true)}, 100);\n         war.play();\n         \n      })\n\n      socket.on('disconnected', player => {\n         setDisconnected(true);\n         setTimeout(() => props.routerProps.history.push(`/`), 5000);\n      })\n\n   }, []);\n\n   function initMyself() {\n      setInitFlag(true);\n      socket.emit('init-one-player', host);\n   }\n\n   function shoot() {\n      deal.play();\n      setClickedOnce(true);\n      socket.emit('ready-up', host);\n      \n   }\n\n   function resolveWar() {\n      deal.play();\n      socket.emit('need-resolution', { host, warringPlayers });\n   }\n\n   return (\n      <>\n         {!disconnected && (\n            <div className='felt-container'>\n               {host && !players && !initFlag && (\n                  <InitPage host={host} initMyself={initMyself} />\n               )}\n               {host && !players && initFlag && (\n                  <h1>Waiting for other players to ready up...</h1>\n               )}\n               {host && players && initFlag && !ultimateWinner && (\n                  <div className='felt'>\n                     <div className='enemy-side'>\n                        {Object.values(players).map((player) => {\n                           if (player.id !== socket.id) {\n                              return (\n                                 <div className='enemy-unit-container'>\n                                    <div className='enemy-slot'>\n                                       <EnemyUnit\n                                          warringPlayers={warringPlayers}\n                                          warState={warState}\n                                          name={player.name}\n                                          deckLength={\n                                             deckLengths\n                                                ? deckLengths[player.id]\n                                                : null\n                                          }\n                                          id={player.id}\n                                          deactivationMap={deactivationMap}\n                                          winner={winner}\n                                       />\n\n                                       <div className='enemystaging'>\n                                          <Stage\n                                             lost={deactivationMap && deactivationMap[player.id] ? true : false}\n                                             winner={winner}\n                                             warState={warState}\n                                             warringPlayers={warringPlayers}\n                                             id={player.id}\n                                             readyPlayers={\n                                                readyPlayers\n                                                   ? readyPlayers\n                                                   : false\n                                             }\n                                          />\n                                       </div>\n                                    </div>\n                                 </div>\n                              );\n                           }\n                        })}\n                     </div>\n                     <div className='felt-partition'>\n                        {warState && <p className='war-statement'>WAR!</p>}\n                     </div>\n                     {!deactivationMap[socket.id] && (\n                        <div className='side-container'>\n                           <ChatBox\n                              socket={socket}\n                              host={props.routerProps.location.pathname.substring(\n                                 10\n                              )}\n                              id={socket.id}\n                           />\n                           <div className='my-side'>\n                              <div className='my-staging'>\n                                 <div>\n                                    <div className='f'>\n                                       {warState &&\n                                          !_.isEmpty(warringPlayers) &&\n                                          warringPlayers[socket.id] &&\n                                          Object.values(warringPlayers).map(\n                                             (p) => {\n                                                return (\n                                                   <img\n                                                      className='sword'\n                                                      src='/images/war_sword.png'\n                                                      alt='sword'\n                                                   ></img>\n                                                );\n                                             }\n                                          )}\n                                       <span>\n                                          <em>S. {players[socket.id].name}</em>\n                                       </span>\n                                    </div>\n                                    {\n                                       <ActionSelect\n                                          lost={false}\n                                          name={\n                                             players\n                                                ? players[socket.id].name\n                                                : 'No Name Selected'\n                                          }\n                                          deckLength={\n                                             deckLengths\n                                                ? deckLengths[socket.id]\n                                                : null\n                                          }\n                                          warState={warState}\n                                          shoot={shoot}\n                                          resolveWar={resolveWar}\n                                          winner={winner}\n                                          warringPlayers={warringPlayers}\n                                          id={socket.id}\n                                          acted={\n                                             readyPlayers &&\n                                             readyPlayers[socket.id]\n                                                ? readyPlayers[socket.id]\n                                                     .changed\n                                                : null\n                                          }\n                                       />\n                                    }\n                                 </div>\n                                 <div className='action-partition'></div>\n                                 <div>\n                                    <div\n                                       style={{ visibility: 'hidden' }}\n                                       className='f'\n                                    >\n                                       {warState &&\n                                          !_.isEmpty(warringPlayers) &&\n                                          warringPlayers[socket.id] &&\n                                          Object.values(warringPlayers).map(\n                                             (p) => {\n                                                return (\n                                                   <img\n                                                      className='sword'\n                                                      src='/images/war_sword.png'\n                                                      alt='sword'\n                                                   ></img>\n                                                );\n                                             }\n                                          )}\n                                       <span>{players[socket.id].name}</span>\n                                    </div>\n                                    <Stage\n                                       lost={false}\n                                       winner={winner}\n                                       warState={warState}\n                                       warringPlayers={warringPlayers}\n                                       id={socket.id}\n                                       readyPlayers={\n                                          readyPlayers ? readyPlayers : false\n                                       }\n                                    />\n                                 </div>\n                              </div>\n                              <p>\n                                 {deckLengths &&\n                                    `Card Count: ${deckLengths[socket.id]}/52`}\n                              </p>\n                           </div>\n                        </div>\n                     )}\n                     {deactivationMap[socket.id] && (\n                        <div className='side-container'>\n                           <ChatBox\n                              socket={socket}\n                              host={props.routerProps.location.pathname.substring(\n                                 10\n                              )}\n                              id={socket.id}\n                           />\n                           <div className='my-side'>\n                              <div className='my-staging'>\n                                 <div>\n                                    <div className='f'>\n                                       <span>\n                                          <em>S. {players[socket.id].name}</em>\n                                       </span>\n                                    </div>\n                                    <ActionSelect\n                                       lost={true}\n                                       name={\n                                          players\n                                             ? players[socket.id].name\n                                             : 'No Name Selected'\n                                       }\n                                       deckLength={\n                                          deckLengths\n                                             ? deckLengths[socket.id]\n                                             : null\n                                       }\n                                       warState={warState}\n                                       shoot={shoot}\n                                       resolveWar={resolveWar}\n                                       winner={winner}\n                                       warringPlayers={warringPlayers}\n                                       id={socket.id}\n                                       acted={\n                                          readyPlayers &&\n                                          readyPlayers[socket.id]\n                                             ? readyPlayers[socket.id].changed\n                                             : null\n                                       }\n                                    />\n                                    }\n                                 </div>\n                                 <div className='action-partition'></div>\n                                 <div>\n                                    <Stage\n                                       lost={true}\n                                       winner={winner}\n                                       warState={warState}\n                                       warringPlayers={warringPlayers}\n                                       id={socket.id}\n                                       readyPlayers={\n                                          readyPlayers ? readyPlayers : false\n                                       }\n                                    />\n                                 </div>\n                              </div>\n                              <p>{deckLengths && `Card Count: 0/52`}</p>\n                           </div>\n                        </div>\n                     )}\n\n                     {ultimateWinner === socket.id && (\n                        <div className='winning-screen'>\n                           <h1>YOU WIN</h1>\n                        </div>\n                     )}\n                  </div>\n               )}\n               {initFlag && <p className='instructions'>Have fun!</p>}\n            </div>\n         )}\n         {disconnected && <Redirecting />}\n         {ultimateWinner && <WinnerPage />}\n      </>\n   );\n}\n\nexport default Room;\n","import React from 'react';\nimport Header from './components/Header'\nimport RoomList from './components/RoomList'\nimport Room from './components/Room';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport openSocket from 'socket.io-client'\n\nconst socket = openSocket('https://sharkhaven.herokuapp.com/');\n\n\nfunction App() {\n   \n  return (\n     <>\n     <header>\n        <Header />\n     </header>\n     <main>\n        <Switch>\n           <Route exact path='/' render={(routerProps) => {\n              return <RoomList socket={socket} routerProps={routerProps} />\n           }}/>\n           <Route path='/cardroom/:roomID' render={(routerProps) => {\n              return <Room socket={socket} routerProps={routerProps} />\n           }} />\n        </Switch>\n      </main>\n     </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  \n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const lowercase = [\n'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n];\n\nconst uppercase = lowercase.map(l => l.toUpperCase());\n\nexports.lowercase = lowercase;\nexports.uppercase = uppercase;","function getPath(pip, suit) {\n    let map = {\n        11: 'J',\n        12: 'Q',\n        13: 'K',\n        14: 'A',\n    };\n\n    let fileName =\n        pip < 11\n            ? '/images/card_sprites/' + pip.toString() + suit + '.png'\n            : '/images/card_sprites/' + map[pip] + suit + '.png';\n    return fileName;\n}\n\nexports.getPath = getPath;"],"sourceRoot":""}